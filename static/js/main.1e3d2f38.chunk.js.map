{"version":3,"sources":["components/Vaper.js","components/AddVaper/FormAddVape.js","config/firebase.js","App.js","serviceWorker.js","index.js"],"names":["Vaper","props","react_default","a","createElement","className","vaper","name","description","Button","color","value","id","onClick","deleteVaper","editVaper","FormVaper","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChangeName","bind","assertThisInitialized","handleChangeDescription","handleSubmit","e","setState","target","preventDefault","alert","isEdit","newDataVape","Form","onSubmit","FormGroup","Label","Input","type","onChange","nextProps","prevState","editVaperData","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","MySwal","withReactContent","Swal","App","getData","collection","onSnapshot","querySnapshot","vapers","docs","map","doc","data","get","then","editVape","edit","action","_this2","fire","title","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","update","showConfirmButton","timer","add","docRef","console","log","catch","concat","cancelButtonText","delete","_this3","Container","Jumbotron","FormAddVape","Row","length","src_components_Vaper","key","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e3d2f38.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Button } from \"reactstrap\";\r\nimport \"./Vaper.css\";\r\nconst Vaper = props => {\r\n\treturn (\r\n\t\t<div className=\"col-md-4\">\r\n\t\t\t<div className=\"Vaper\">\r\n\t\t\t\t<h3>{props.vaper.name}</h3>\r\n\t\t\t\t<p>{props.vaper.description}</p>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\tvalue={props.vaper.id}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tprops.deleteVaper(props.vaper);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tX\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tcolor=\"warning\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tprops.editVaper(props.vaper.id);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tEditar\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Vaper;\r\n","import React, { Component } from \"react\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n// import db from \"../../config/firebase\";\r\nclass FormVaper extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tname: \"\",\r\n\t\t\tdescription: \"\",\r\n\t\t\tid: \"\"\r\n\t\t};\r\n\t\tthis.handleChangeName = this.handleChangeName.bind(this);\r\n\t\tthis.handleChangeDescription = this.handleChangeDescription.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\thandleChangeName(e) {\r\n\t\tthis.setState({ name: e.target.value });\r\n\t}\r\n\tstatic getDerivedStateFromProps(nextProps, prevState) {\r\n\t\tif (nextProps.editVaperData.id) {\r\n\t\t\t// let docRef = db.collection(\"vapers\").doc(props.idEdit);\r\n\t\t\t// docRef.get().then(doc => {\r\n\t\t\t// \t// this.setState({\r\n\t\t\t// \t// \tname: doc.data().name,\r\n\t\t\t// \t// \tdescription: doc.data().description\r\n\t\t\t// \t// });\r\n\t\t\t// \tconsole.log(doc.data());\r\n\r\n\t\t\t// });\r\n\t\t\t// if (state.id) {\r\n\t\t\t// \treturn null;\r\n\t\t\t// }\r\n\t\t\tif (nextProps.editVaperData.id !== prevState.id) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: nextProps.editVaperData.id,\r\n\t\t\t\t\tname: nextProps.editVaperData.name,\r\n\t\t\t\t\tdescription: nextProps.editVaperData.description\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// return {\r\n\t\t\t// \tid: nextProps.editVaperData.id,\r\n\t\t\t// \tname: nextProps.editVaperData.name,\r\n\t\t\t// \tdescription: nextProps.editVaperData.description\r\n\t\t\t// };\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\thandleChangeDescription(e) {\r\n\t\tthis.setState({ description: e.target.value });\r\n\t}\r\n\thandleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\tif (this.state.name === \"\" && this.state.description === \"\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.state.name === \"\") {\r\n\t\t\treturn alert(\"debes colocar un nombre\");\r\n\t\t}\r\n\t\tif (this.state.description === \"\") {\r\n\t\t\treturn alert(\"debes colocar una description\");\r\n\t\t}\r\n\t\tif (this.props.isEdit) {\r\n\t\t\tthis.props.newDataVape(\r\n\t\t\t\tthis.state.name,\r\n\t\t\t\tthis.state.description,\r\n\t\t\t\tthis.state.id\r\n\t\t\t);\r\n\t\t\tthis.setState({ name: \"\", description: \"\" });\r\n\t\t} else {\r\n\t\t\tthis.props.newDataVape(\r\n\t\t\t\tthis.state.name,\r\n\t\t\t\tthis.state.description,\r\n\t\t\t\tthis.state.id\r\n\t\t\t);\r\n\t\t\tthis.setState({ name: \"\", description: \"\" });\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<FormGroup>\r\n\t\t\t\t\t<Label>Nombre: </Label>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tonChange={this.handleChangeName}\r\n\t\t\t\t\t\tvalue={this.state.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</FormGroup>\r\n\t\t\t\t<FormGroup>\r\n\t\t\t\t\t<Label>Description: </Label>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\tonChange={this.handleChangeDescription}\r\n\t\t\t\t\t\tvalue={this.state.description}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</FormGroup>\r\n\t\t\t\t<Button type=\"submit\" color=\"success\">\r\n\t\t\t\t\t{this.props.isEdit ? \"Actualizar\" : \"guardar\"}\r\n\t\t\t\t</Button>\r\n\t\t\t</Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default FormVaper;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\nfirebase.initializeApp({\r\n\tapiKey: \"AIzaSyBLxP0ADqVjzE1ozx4NGemhP6LMYECEhZU\",\r\n\tauthDomain: \"practicas-89b6e.firebaseapp.com\",\r\n\tdatabaseURL: \"https://practicas-89b6e.firebaseio.com\",\r\n\tprojectId: \"practicas-89b6e\",\r\n\tstorageBucket: \"practicas-89b6e.appspot.com\",\r\n\tmessagingSenderId: \"640281701833\",\r\n\tappId: \"1:640281701833:web:3b66bbe8810f93a0\"\r\n});\r\n\r\nlet db = firebase.firestore();\r\n\r\nexport default db;\r\n","import React from \"react\";\r\nimport Vaper from \"./components/Vaper.js\";\r\nimport FormVaper from \"./components/AddVaper/FormAddVape.js\";\r\nimport db from \"./config/firebase\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\n//reactstrap\r\n\r\nimport { Container, Row, Jumbotron } from \"reactstrap\";\r\n\r\n// />\r\n\r\nconst MySwal = withReactContent(Swal);\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvapers: [],\r\n\t\t\tedit: false,\r\n\t\t\teditVape: {}\r\n\t\t};\r\n\r\n\t\tthis.action = this.action.bind(this);\r\n\t}\r\n\r\n\taction(name, description, id) {\r\n\t\tif (this.state.edit) {\r\n\t\t\tMySwal.fire({\r\n\t\t\t\ttitle: \"¿Estas seguro que desea actualizar?\",\r\n\t\t\t\ttext:\r\n\t\t\t\t\t\"Luego de presionar ok, sus antiguos datos se remplazaran con los nuevo.!\",\r\n\t\t\t\ttype: \"success\",\r\n\t\t\t\tshowCancelButton: true,\r\n\t\t\t\tconfirmButtonColor: \"#3085d6\",\r\n\t\t\t\tcancelButtonColor: \"#d33\",\r\n\t\t\t\tconfirmButtonText: \"Si, actualizar!\"\r\n\t\t\t}).then(result => {\r\n\t\t\t\tif (result.value) {\r\n\t\t\t\t\tdb.collection(\"vapers\")\r\n\t\t\t\t\t\t.doc(id)\r\n\t\t\t\t\t\t.update({\r\n\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\tdescription\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(() =>\r\n\t\t\t\t\t\t\tthis.setState({ edit: false, editVape: {} })\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\tMySwal.fire(\r\n\t\t\t\t\t\t\"Actualizado!\",\r\n\t\t\t\t\t\t\"Tu producto ha sido actualizado correctamente\",\r\n\t\t\t\t\t\t\"success\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tMySwal.fire({\r\n\t\t\t\ttitle: \"Creado correctamente!!!\",\r\n\t\t\t\ttype: \"success\",\r\n\t\t\t\tshowConfirmButton: false,\r\n\t\t\t\tconfirmButtonColor: \"#3085d6\",\r\n\t\t\t\ttimer: 1000\r\n\t\t\t}).then(() => {\r\n\t\t\t\tdb.collection(\"vapers\")\r\n\t\t\t\t\t.add({\r\n\t\t\t\t\t\tname,\r\n\t\t\t\t\t\tdescription\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then(docRef => console.log(\"agregado\"))\r\n\t\t\t\t\t.catch(e => console.log(e));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.getData();\r\n\t}\r\n\tgetData = () => {\r\n\t\tdb.collection(\"vapers\").onSnapshot(querySnapshot => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tvapers: querySnapshot.docs.map(doc => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: doc.id,\r\n\t\t\t\t\t\tname: doc.data().name,\r\n\t\t\t\t\t\tdescription: doc.data().description\r\n\t\t\t\t\t};\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tdeleteVaper(vaper) {\r\n\t\tMySwal.fire({\r\n\t\t\ttitle: `¿Estas seguro que desea Eliminar: ${vaper.name}?`,\r\n\t\t\ttext:\r\n\t\t\t\t\"Luego de presionar ok, se eliminara el registro del producto\",\r\n\t\t\ttype: \"success\",\r\n\t\t\tshowCancelButton: true,\r\n\t\t\tconfirmButtonColor: \"#3085d6\",\r\n\t\t\tcancelButtonColor: \"#d33\",\r\n\t\t\tconfirmButtonText: \"Si, eliminar!\",\r\n\t\t\tcancelButtonText: \"cancelar\"\r\n\t\t}).then(result => {\r\n\t\t\tif (result.value) {\r\n\t\t\t\tdb.collection(\"vapers\")\r\n\t\t\t\t\t.doc(vaper.id)\r\n\t\t\t\t\t.delete()\r\n\t\t\t\t\t.then(function() {\r\n\t\t\t\t\t\tconsole.log(\"eliminado\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(e => {\r\n\t\t\t\t\t\tconsole.log(\"eliminado correctamente\");\r\n\t\t\t\t\t});\r\n\t\t\t\tMySwal.fire(\r\n\t\t\t\t\t\"Eliminado!\",\r\n\t\t\t\t\t\"Tu producto ha sido eliminado correctamente\",\r\n\t\t\t\t\t\"success\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\teditVaper = id => {\r\n\t\tlet docRef = db.collection(\"vapers\").doc(id);\r\n\r\n\t\tdocRef.get().then(doc => {\r\n\t\t\tthis.setState({\r\n\t\t\t\teditVape: {\r\n\t\t\t\t\tname: doc.data().name,\r\n\t\t\t\t\tdescription: doc.data().description,\r\n\t\t\t\t\tid: doc.id\r\n\t\t\t\t},\r\n\t\t\t\tedit: true\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container>\r\n\t\t\t\t<Jumbotron className=\"text-center\">\r\n\t\t\t\t\t<h1>Product vape app.</h1>\r\n\t\t\t\t\t<p>Aprendiendo ReactJS a fondo.</p>\r\n\t\t\t\t</Jumbotron>\r\n\t\t\t\t<FormVaper\r\n\t\t\t\t\tnewDataVape={this.action}\r\n\t\t\t\t\teditVaperData={this.state.editVape}\r\n\t\t\t\t\tisEdit={this.state.edit}\r\n\t\t\t\t/>\r\n\t\t\t\t<h1>Primer componente</h1>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t{this.state.vapers.length === 0 ? (\r\n\t\t\t\t\t\t<p className=\"mx-auto\">\r\n\t\t\t\t\t\t\tlo sentimos, no hay productos disponibles\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\tthis.state.vapers.map(vaper => (\r\n\t\t\t\t\t\t\t<Vaper\r\n\t\t\t\t\t\t\t\tkey={vaper.id}\r\n\t\t\t\t\t\t\t\tvaper={vaper}\r\n\t\t\t\t\t\t\t\tdeleteVaper={this.deleteVaper}\r\n\t\t\t\t\t\t\t\teditVaper={this.editVaper}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}